ometa Condition {
    expr = atom:l operator:op atom:r -> [ op, l, r ],

    operator = ``<='' | '<' | ``>='' | '>' | ``=='' | ``!='',

    identifier = <(letter|'_') (letter | digit | '_')*>:v -> this._options.variables[v],

    floatnumber = (exponentfloat | pointfloat):f -> parseFloat(f),
    pointfloat  =  intpart?:x fraction:y -> x + "." + y
        | intpart:x '.' -> x + ".0",
    exponentfloat =  (intpart | pointfloat):f exponent:e -> f + 'e' + e,
    intpart       =  digit+:v -> v.join(''),
    fraction      =  '.' digit+:y -> y.join(''),
    exponent      =  ('e' | 'E') ('+' | '-')? digit+:e, -> e.join(''),

    longinteger = integer:i ('L' | 'l') -> i,
    integer = bininteger | octinteger | hexinteger | decimalinteger,
    decimalinteger = (nonzerodigit digit*):v -> parseInt(v, 10)
        | '0' -> 0,
    octinteger = /0o/i octdigit+:v -> parseInt(v.join(''), 8);
        | ('0' octdigit+):v -> parseInt(v, 8),
    hexinteger = /0x/i hexdigit+:v -> parseInt(v.join(''), 16),
    bininteger = /0b/i bindigit+:v -> parseInt(v.join(''), 2),
    nonzerodigit = /[1-9]/,
    octdigit = /[0-7]/,
    bindigit = /[01]/,
    hexdigit = digit | /[a-f]/i,

    stringliteral   =  stringprefix? (longstring | shortstring),
    stringprefix    =  'r' | 'u' | 'ur' | 'R' | 'U' | 'UR' | 'Ur' | 'uR'
                        | 'b' | 'B' | 'br' | 'Br' | 'bR' | 'BR',
    shortstring     =  '\'' shortstringitem('\'')*:v '\'' -> v.join('')
                        | '"' shortstringitem('"')*:v '"' -> v.join(''),
    longstring      =  seq('\'\'\'') (~seq('\'\'\'') longstringitem)*:v seq('\'\'\'') -> v.join('')
                        | seq('"""') (~seq('"""') longstringitem)*:v seq('"""') -> v.join(''),
    shortstringitem :q = escapeseq | shortstringchar(q),
    shortstringchar :q =  ~('\\' | '\n' | seq(q)) char,
    longstringitem  =  escapeseq | longstringchar,
    longstringchar  =  ~'\\' char,
    escapeseq       =  '\\' char:v -> v,

    atom = identifier | literal,

    literal = stringliteral | floatnumber | longinteger | integer
}

ometa Evaluator {
    interp = [ '>' anything:x anything:y ] -> x > y
        | ['<' anything:x anything:y ]     -> x < y
        | ['>=' anything:x anything:y ]    -> x >= y
        | ['<=' anything:x anything:y ]    -> x <= y
        | ['!=' anything:x anything:y ]    -> x != y
        | ['==' anything:x anything:y ]    -> x == y
}

module.exports = function (str, variables) {
    var tree = Condition.matchAll(str, 'expr', { variables: variables });
    return Evaluator.match(tree, 'interp');
}

module.exports.parser = Condition;
